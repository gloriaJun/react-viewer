// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react
//   ../@ridi/reader.js/web

declare module '@ridi/react-reader' {
    import EpubReader from '@ridi/react-reader/components/EpubReader';
    import Loading from '@ridi/react-reader/components/Loading';
    import * as SettingUtil from '@ridi/react-reader/SettingUtil';
    export { EpubReader, Loading, SettingUtil, };
    export * from '@ridi/react-reader/EpubService';
    export * from '@ridi/react-reader/contexts';
    export * from '@ridi/react-reader/ReaderJsHelper';
}

declare module '@ridi/react-reader/components/EpubReader' {
    const EpubReader: () => JSX.Element;
    export default EpubReader;
}

declare module '@ridi/react-reader/components/Loading' {
    /** @jsx jsx */
    import * as React from 'react';
    const Loading: React.FunctionComponent;
    export default Loading;
}

declare module '@ridi/react-reader/SettingUtil' {
    import { SettingState } from '@ridi/react-reader/contexts';
    export const isScroll: ({ viewType }: SettingState) => boolean;
    export const isDoublePage: ({ viewType }: SettingState) => boolean;
    export const columnsInPage: ({ viewType }: SettingState) => number;
    export const columnWidth: (setting: SettingState) => number;
    export const columnGap: ({ columnGapInPercent }: SettingState) => number;
    export const contentPadding: ({ contentPaddingInPercent }: SettingState) => number;
    export const containerWidth: (setting: SettingState) => number;
    export const containerHeight: ({ containerVerticalMargin }: SettingState) => number;
}

declare module '@ridi/react-reader/EpubService' {
    import { PagingAction, SettingAction, SettingState, StatusAction } from '@ridi/react-reader/contexts';
    import * as React from 'react';
    export interface FontData {
        href: string;
    }
    export interface EpubParsedData {
        fonts?: Array<FontData>;
        styles?: Array<String>;
        spines?: Array<String>;
        unzipPath: string;
    }
    export interface PagingResult {
        totalPage: number;
        pageUnit: number;
        fullHeight: number;
        fullWidth: number;
    }
    export class EpubService {
        static dispatchSetting?: React.Dispatch<SettingAction>;
        static dispatchStatus?: React.Dispatch<StatusAction>;
        static dispatchPaging?: React.Dispatch<PagingAction>;
        static init({ dispatchSetting, dispatchPaging, dispatchStatus }: {
            dispatchSetting: React.Dispatch<SettingAction>;
            dispatchStatus: React.Dispatch<StatusAction>;
            dispatchPaging: React.Dispatch<PagingAction>;
        }): void;
        static goToPage: ({ page, pageUnit, isScroll, columnsInPage, }: {
            page: number;
            pageUnit: number;
            isScroll: boolean;
            columnsInPage: number;
        }) => Promise<void>;
        static invalidate: ({ currentPage, isScroll, columnWidth, columnGap, columnsInPage, }: {
            currentPage: number;
            isScroll: boolean;
            columnWidth: number;
            columnGap: number;
            columnsInPage: number;
        }) => Promise<void>;
        static load: ({ metadata, currentPage, isScroll, columnWidth, columnGap, columnsInPage, }: {
            metadata: EpubParsedData;
            currentPage: number;
            isScroll: boolean;
            columnWidth: number;
            columnGap: number;
            columnsInPage: number;
        }) => Promise<void>;
        static loadWithParsedData: ({ metadata, currentPage, isScroll, columnWidth, columnGap, columnsInPage, }: {
            metadata: EpubParsedData;
            currentPage: number;
            isScroll: boolean;
            columnWidth: number;
            columnGap: number;
            columnsInPage: number;
        }) => Promise<void>;
        static updateCurrent: ({ pageUnit, isScroll, columnsInPage }: {
            pageUnit: number;
            isScroll: boolean;
            columnsInPage: number;
        }) => Promise<any>;
        static updateSetting: (setting: Partial<SettingState>) => void;
    }
}

declare module '@ridi/react-reader/contexts' {
    export * from '@ridi/react-reader/contexts/SettingContext';
    export * from '@ridi/react-reader/contexts/PagingContext';
    export * from '@ridi/react-reader/contexts/StatusContext';
    export * from '@ridi/react-reader/contexts/EpubProvider';
}

declare module '@ridi/react-reader/ReaderJsHelper' {
    import { Context, Reader } from '@ridi/reader.js/web';
    class ReaderJsHelper {
        readonly readerJs: Reader | null;
        readonly sel: any;
        readonly content: any;
        readonly context: any;
        _setDebugMode(debugMode?: boolean): void;
        mount(contentRoot: HTMLElement, context: Context): void;
        unmount(): void;
        reviseImages(): Promise<any>;
        getOffsetFromNodeLocation(location: any): number | null;
        getNodeLocationOfCurrentPage(): string | null;
        getRectsFromSerializedRange(serializedRange: string): Array<any> | null;
        getOffsetFromSerializedRange(serializedRange: string): number | null;
        getOffsetFromAnchor(anchor: string): number | null;
    }
    const _default: ReaderJsHelper;
    export default _default;
    export { Context };
}

declare module '@ridi/react-reader/contexts/SettingContext' {
    import { Reducer } from "react";
    export enum ViewType {
        SCROLL = 0,
        PAGE1 = 1,
        PAGE12 = 2,
        PAGE23 = 3
    }
    export enum SettingActionType {
        UPDATE_SETTING = 0
    }
    export type SettingAction = {
        type: SettingActionType.UPDATE_SETTING;
        setting: Partial<SettingState>;
    };
    export type SettingState = {
        viewType: ViewType;
        fontSizeInEm: number;
        lineHeightInEm: number;
        contentPaddingInPercent: number;
        columnGapInPercent: number;
        maxWidth: number;
        containerHorizontalMargin: number;
        containerVerticalMargin: number;
    };
    export const initialSettingState: SettingState;
    export const settingReducer: Reducer<SettingState, SettingAction>;
    export const SettingDispatchContext: import("react").Context<import("react").Dispatch<SettingAction>>, SettingContext: import("react").Context<SettingState>, SettingContextProvider: import("react").FunctionComponent<{
        children: import("react").ReactNode;
        customInitialState?: SettingState | undefined;
    }>;
}

declare module '@ridi/react-reader/contexts/PagingContext' {
    import * as React from 'react';
    export enum PagingActionType {
        UPDATE_PAGING = 0
    }
    export type PagingAction = {
        type: PagingActionType.UPDATE_PAGING;
        paging: Partial<PagingState>;
    };
    export type PagingState = {
        totalPage: number;
        currentPage: number;
        fullHeight: number;
        fullWidth: number;
        pageUnit: number;
    };
    export const initialPagingState: PagingState;
    export const PagingReducer: React.Reducer<PagingState, PagingAction>;
    export const PagingDispatchContext: React.Context<React.Dispatch<PagingAction>>, PagingContext: React.Context<PagingState>, PagingContextProvider: React.FunctionComponent<{
        children: React.ReactNode;
        customInitialState?: PagingState | undefined;
    }>;
}

declare module '@ridi/react-reader/contexts/StatusContext' {
    import * as React from 'react';
    export enum StatusActionType {
        SET_START_TO_READ = 0
    }
    export type StatusAction = {
        type: StatusActionType.SET_START_TO_READ;
        startToRead: boolean;
    };
    export type StatusState = {
        startToRead: boolean;
    };
    export const initialStatusState: StatusState;
    export const StatusReducer: React.Reducer<StatusState, StatusAction>;
    export const StatusDispatchContext: React.Context<React.Dispatch<StatusAction>>, StatusContext: React.Context<StatusState>, StatusContextProvider: React.FunctionComponent<{
        children: React.ReactNode;
        customInitialState?: StatusState | undefined;
    }>;
}

declare module '@ridi/react-reader/contexts/EpubProvider' {
    import { PagingState } from '@ridi/react-reader/contexts/PagingContext';
    import { StatusState } from '@ridi/react-reader/contexts/StatusContext';
    import { SettingState } from '@ridi/react-reader/contexts/SettingContext';
    import * as React from 'react';
    export interface EpubProviderProps {
        children: React.ReactNode;
        settingState?: SettingState;
        pagingState?: PagingState;
        statusState?: StatusState;
    }
    export const EpubProvider: React.FunctionComponent<EpubProviderProps>;
}

