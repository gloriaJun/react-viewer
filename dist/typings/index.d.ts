// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react
//   ../@ridi/reader.js/web

declare module '@ridi/react-reader' {
    import EpubReader from '@ridi/react-reader/components/EpubReader';
    import * as SettingUtil from '@ridi/react-reader/SettingUtil';
    export { EpubReader, SettingUtil };
    export * from '@ridi/react-reader/EpubService';
    export * from '@ridi/react-reader/contexts';
    export * from '@ridi/react-reader/ReaderJsHelper';
    export * from '@ridi/react-reader/constants';
}

declare module '@ridi/react-reader/components/EpubReader' {
    const EpubReader: () => JSX.Element;
    export default EpubReader;
}

declare module '@ridi/react-reader/SettingUtil' {
    import { EpubSettingState } from '@ridi/react-reader/contexts';
    export const isScroll: ({ viewType }: EpubSettingState) => boolean;
    export const isDoublePage: ({ viewType }: EpubSettingState) => boolean;
    export const columnsInPage: ({ viewType }: EpubSettingState) => number;
    export const columnWidth: (setting: EpubSettingState) => number;
    export const columnGap: ({ columnGapInPercent }: EpubSettingState) => number;
    export const contentPadding: ({ contentPaddingInPercent }: EpubSettingState) => number;
    export const containerWidth: (setting: EpubSettingState) => number;
    export const containerHeight: ({ containerVerticalMargin }: EpubSettingState) => number;
}

declare module '@ridi/react-reader/EpubService' {
    import { EpubPagingAction, EpubSettingAction, EpubSettingState, SpinePagingState, EpubStatusAction } from '@ridi/react-reader/contexts';
    import * as React from 'react';
    export interface FontData {
        href: string;
    }
    export interface EpubParsedData {
        fonts?: Array<FontData>;
        styles?: Array<String>;
        spines?: Array<String>;
        unzipPath: string;
    }
    export class EpubService {
        static dispatchSetting?: React.Dispatch<EpubSettingAction>;
        static dispatchStatus?: React.Dispatch<EpubStatusAction>;
        static dispatchPaging?: React.Dispatch<EpubPagingAction>;
        static init({ dispatchSetting, dispatchPaging, dispatchStatus }: {
            dispatchSetting: React.Dispatch<EpubSettingAction>;
            dispatchStatus: React.Dispatch<EpubStatusAction>;
            dispatchPaging: React.Dispatch<EpubPagingAction>;
        }): void;
        static goToPage: ({ page, pageUnit, isScroll, }: {
            page: number;
            pageUnit: number;
            isScroll: boolean;
        }) => Promise<void>;
        static invalidate: ({ currentSpineIndex, currentPosition, isScroll, columnWidth, columnGap, }: {
            currentSpineIndex: number;
            currentPosition: number;
            isScroll: boolean;
            columnWidth: number;
            columnGap: number;
        }) => Promise<void>;
        static load: ({ currentSpineIndex, currentPosition, metadata, isScroll, columnWidth, columnGap, }: {
            currentSpineIndex: number;
            currentPosition: number;
            metadata: EpubParsedData;
            isScroll: boolean;
            columnWidth: number;
            columnGap: number;
        }) => Promise<void>;
        static loadWithParsedData: ({ currentSpineIndex, currentPosition, metadata, isScroll, columnWidth, columnGap, }: {
            currentSpineIndex: number;
            currentPosition: number;
            metadata: EpubParsedData;
            isScroll: boolean;
            columnWidth: number;
            columnGap: number;
        }) => Promise<void>;
        static updateCurrent: ({ pageUnit, isScroll, spines, }: {
            pageUnit: number;
            isScroll: boolean;
            spines: SpinePagingState[];
        }) => Promise<any>;
        static updateSetting: (setting: Partial<EpubSettingState>) => Promise<void>;
    }
}

declare module '@ridi/react-reader/contexts' {
    export * from '@ridi/react-reader/contexts/EpubSettingContext';
    export * from '@ridi/react-reader/contexts/EpubPagingContext';
    export * from '@ridi/react-reader/contexts/EpubStatusContext';
    export * from '@ridi/react-reader/contexts/EpubProvider';
}

declare module '@ridi/react-reader/ReaderJsHelper' {
    import { Context, Reader } from '@ridi/reader.js/web';
    class ReaderJsHelper {
        readonly readerJs: Reader | null;
        readonly sel: any;
        readonly content: any;
        readonly context: any;
        _setDebugMode(debugMode?: boolean): void;
        mount(contentRoot: HTMLElement, context: Context): void;
        unmount(): void;
        reviseImages(): Promise<any>;
        getOffsetFromNodeLocation(location: any): number | null;
        getNodeLocationOfCurrentPage(): string | null;
        getRectsFromSerializedRange(serializedRange: string): Array<any> | null;
        getOffsetFromSerializedRange(serializedRange: string): number | null;
        getOffsetFromAnchor(anchor: string): number | null;
    }
    const _default: ReaderJsHelper;
    export default _default;
    export { Context };
}

declare module '@ridi/react-reader/constants' {
    export enum ViewType {
        SCROLL = "scroll",
        PAGE1 = "page1",
        PAGE12 = "page12",
        PAGE23 = "page23"
    }
}

declare module '@ridi/react-reader/contexts/EpubSettingContext' {
    import { Reducer } from "react";
    import { ViewType } from '@ridi/react-reader/constants';
    export enum EpubSettingActionType {
        UPDATE_SETTING = "update_setting"
    }
    export enum EpubSettingProperties {
        VIEW_TYPE = "viewType",
        FONT = "font",
        FONT_SIZE_IN_EM = "fontSizeInEm",
        LINE_HEIGHT_IN_EM = "lineHeightInEm",
        CONTENT_PADDING_IN_PERCENT = "contentPaddingInPercent",
        COLUMN_GAP_IN_PERCENT = "columnGapInPercent",
        CONTAINER_HORIZONTAL_MARGIN = "containerHorizontalMargin",
        CONTAINER_VERTICAL_MARGIN = "containerVerticalMargin"
    }
    export type EpubSettingAction = {
        type: EpubSettingActionType.UPDATE_SETTING;
        setting: Partial<EpubSettingState>;
    };
    export type EpubSettingState = {
        [EpubSettingProperties.VIEW_TYPE]: ViewType;
        [EpubSettingProperties.FONT]: string;
        [EpubSettingProperties.FONT_SIZE_IN_EM]: number;
        [EpubSettingProperties.LINE_HEIGHT_IN_EM]: number;
        [EpubSettingProperties.CONTENT_PADDING_IN_PERCENT]: number;
        [EpubSettingProperties.COLUMN_GAP_IN_PERCENT]: number;
        [EpubSettingProperties.CONTAINER_HORIZONTAL_MARGIN]: number;
        [EpubSettingProperties.CONTAINER_VERTICAL_MARGIN]: number;
    };
    export const initialEpubSettingState: EpubSettingState;
    export const EpubSettingReducer: Reducer<EpubSettingState, EpubSettingAction>;
    export const EpubSettingDispatchContext: import("react").Context<import("react").Dispatch<EpubSettingAction>>, EpubSettingContext: import("react").Context<EpubSettingState>, EpubSettingContextProvider: import("react").FunctionComponent<{
        children: import("react").ReactNode;
        customInitialState?: Partial<EpubSettingState> | undefined;
    }>;
}

declare module '@ridi/react-reader/contexts/EpubPagingContext' {
    import * as React from 'react';
    export enum EpubPagingActionType {
        UPDATE_PAGING = "update_paging"
    }
    export enum EpubPagingProperties {
        TOTAL_PAGE = "totalPage",
        FULL_HEIGHT = "fullHeight",
        FULL_WIDTH = "fullWidth",
        PAGE_UNIT = "pageUnit",
        CURRENT_PAGE = "currentPage",
        CURRENT_SPINE_INDEX = "currentSpineIndex",
        CURRENT_POSITION = "currentPosition",
        SPINES = "spines"
    }
    export type EpubPagingAction = {
        type: EpubPagingActionType.UPDATE_PAGING;
        paging: Partial<EpubPagingState>;
    };
    export type SpinePagingState = {
        spineIndex: number;
        offset: number;
        total: number;
        pageOffset: number;
        totalPage: number;
    };
    export type EpubPagingState = {
        [EpubPagingProperties.TOTAL_PAGE]: number;
        [EpubPagingProperties.FULL_HEIGHT]: number;
        [EpubPagingProperties.FULL_WIDTH]: number;
        [EpubPagingProperties.PAGE_UNIT]: number;
        [EpubPagingProperties.CURRENT_PAGE]: number;
        [EpubPagingProperties.CURRENT_SPINE_INDEX]: number;
        [EpubPagingProperties.CURRENT_POSITION]: number;
        [EpubPagingProperties.SPINES]: Array<SpinePagingState>;
    };
    export const initialEpubPagingState: EpubPagingState;
    export const EpubPagingReducer: React.Reducer<EpubPagingState, EpubPagingAction>;
    export const EpubPagingDispatchContext: React.Context<React.Dispatch<EpubPagingAction>>, EpubPagingContext: React.Context<EpubPagingState>, EpubPagingContextProvider: React.FunctionComponent<{
        children: React.ReactNode;
        customInitialState?: Partial<EpubPagingState> | undefined;
    }>;
}

declare module '@ridi/react-reader/contexts/EpubStatusContext' {
    import * as React from 'react';
    export enum EpubStatusActionType {
        SET_READY_TO_READ = "set_ready_to_read"
    }
    export enum EpubStatusProperties {
        READY_TO_READ = "readyToRead"
    }
    export type EpubStatusAction = {
        type: EpubStatusActionType.SET_READY_TO_READ;
        readyToRead: boolean;
    };
    export type StatusState = {
        [EpubStatusProperties.READY_TO_READ]: boolean;
    };
    export const initialEpubStatusState: StatusState;
    export const EpubStatusReducer: React.Reducer<StatusState, EpubStatusAction>;
    export const EpubStatusDispatchContext: React.Context<React.Dispatch<EpubStatusAction>>, EpubStatusContext: React.Context<StatusState>, EpubStatusContextProvider: React.FunctionComponent<{
        children: React.ReactNode;
        customInitialState?: Partial<StatusState> | undefined;
    }>;
}

declare module '@ridi/react-reader/contexts/EpubProvider' {
    import { EpubPagingState } from '@ridi/react-reader/contexts/EpubPagingContext';
    import { StatusState } from '@ridi/react-reader/contexts/EpubStatusContext';
    import { EpubSettingState } from '@ridi/react-reader/contexts/EpubSettingContext';
    import * as React from 'react';
    export interface EpubProviderProps {
        children: React.ReactNode;
        settingState?: Partial<EpubSettingState>;
        pagingState?: Partial<EpubPagingState>;
        statusState?: Partial<StatusState>;
    }
    export const EpubProvider: React.FunctionComponent<EpubProviderProps>;
}

